// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.14.0
 * source: vulcanize/nameservice/v1beta1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./nameservice";
import * as pb_1 from "google-protobuf";
export namespace vulcanize.nameservice.v1beta1 {
    export class MsgSetRecord extends pb_1.Message {
        constructor(data?: any[] | {
            bond_id?: string;
            signer?: string;
            payload?: Payload;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bond_id" in data && data.bond_id != undefined) {
                    this.bond_id = data.bond_id;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
            }
        }
        get bond_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set bond_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get payload() {
            return pb_1.Message.getWrapperField(this, Payload, 3) as Payload;
        }
        set payload(value: Payload) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            bond_id?: string;
            signer?: string;
            payload?: ReturnType<typeof Payload.prototype.toObject>;
        }) {
            const message = new MsgSetRecord({});
            if (data.bond_id != null) {
                message.bond_id = data.bond_id;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            if (data.payload != null) {
                message.payload = Payload.fromObject(data.payload);
            }
            return message;
        }
        toObject() {
            const data: {
                bond_id?: string;
                signer?: string;
                payload?: ReturnType<typeof Payload.prototype.toObject>;
            } = {};
            if (this.bond_id != null) {
                data.bond_id = this.bond_id;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            if (this.payload != null) {
                data.payload = this.payload.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.bond_id === "string" && this.bond_id.length)
                writer.writeString(1, this.bond_id);
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(2, this.signer);
            if (this.payload !== undefined)
                writer.writeMessage(3, this.payload, () => this.payload.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSetRecord {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSetRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bond_id = reader.readString();
                        break;
                    case 2:
                        message.signer = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.payload, () => message.payload = Payload.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSetRecord {
            return MsgSetRecord.deserialize(bytes);
        }
    }
    export class MsgSetRecordResponse extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }) {
            const message = new MsgSetRecordResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSetRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSetRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSetRecordResponse {
            return MsgSetRecordResponse.deserialize(bytes);
        }
    }
    export class Payload extends pb_1.Message {
        constructor(data?: any[] | {
            record?: dependency_2.vulcanize.nameservice.v1beta1.Record;
            signatures?: dependency_2.vulcanize.nameservice.v1beta1.Signature[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("record" in data && data.record != undefined) {
                    this.record = data.record;
                }
                if ("signatures" in data && data.signatures != undefined) {
                    this.signatures = data.signatures;
                }
            }
        }
        get record() {
            return pb_1.Message.getWrapperField(this, dependency_2.vulcanize.nameservice.v1beta1.Record, 1) as dependency_2.vulcanize.nameservice.v1beta1.Record;
        }
        set record(value: dependency_2.vulcanize.nameservice.v1beta1.Record) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get signatures() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.vulcanize.nameservice.v1beta1.Signature, 2) as dependency_2.vulcanize.nameservice.v1beta1.Signature[];
        }
        set signatures(value: dependency_2.vulcanize.nameservice.v1beta1.Signature[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            record?: ReturnType<typeof dependency_2.vulcanize.nameservice.v1beta1.Record.prototype.toObject>;
            signatures?: ReturnType<typeof dependency_2.vulcanize.nameservice.v1beta1.Signature.prototype.toObject>[];
        }) {
            const message = new Payload({});
            if (data.record != null) {
                message.record = dependency_2.vulcanize.nameservice.v1beta1.Record.fromObject(data.record);
            }
            if (data.signatures != null) {
                message.signatures = data.signatures.map(item => dependency_2.vulcanize.nameservice.v1beta1.Signature.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                record?: ReturnType<typeof dependency_2.vulcanize.nameservice.v1beta1.Record.prototype.toObject>;
                signatures?: ReturnType<typeof dependency_2.vulcanize.nameservice.v1beta1.Signature.prototype.toObject>[];
            } = {};
            if (this.record != null) {
                data.record = this.record.toObject();
            }
            if (this.signatures != null) {
                data.signatures = this.signatures.map((item: dependency_2.vulcanize.nameservice.v1beta1.Signature) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.record !== undefined)
                writer.writeMessage(1, this.record, () => this.record.serialize(writer));
            if (this.signatures !== undefined)
                writer.writeRepeatedMessage(2, this.signatures, (item: dependency_2.vulcanize.nameservice.v1beta1.Signature) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Payload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Payload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.record, () => message.record = dependency_2.vulcanize.nameservice.v1beta1.Record.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.signatures, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.vulcanize.nameservice.v1beta1.Signature.deserialize(reader), dependency_2.vulcanize.nameservice.v1beta1.Signature));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Payload {
            return Payload.deserialize(bytes);
        }
    }
    export class MsgSetName extends pb_1.Message {
        constructor(data?: any[] | {
            crn?: string;
            cid?: string;
            signer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("crn" in data && data.crn != undefined) {
                    this.crn = data.crn;
                }
                if ("cid" in data && data.cid != undefined) {
                    this.cid = data.cid;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
            }
        }
        get crn() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set crn(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get cid() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set cid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            crn?: string;
            cid?: string;
            signer?: string;
        }) {
            const message = new MsgSetName({});
            if (data.crn != null) {
                message.crn = data.crn;
            }
            if (data.cid != null) {
                message.cid = data.cid;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            return message;
        }
        toObject() {
            const data: {
                crn?: string;
                cid?: string;
                signer?: string;
            } = {};
            if (this.crn != null) {
                data.crn = this.crn;
            }
            if (this.cid != null) {
                data.cid = this.cid;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.crn === "string" && this.crn.length)
                writer.writeString(1, this.crn);
            if (typeof this.cid === "string" && this.cid.length)
                writer.writeString(2, this.cid);
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(3, this.signer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSetName {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSetName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.crn = reader.readString();
                        break;
                    case 2:
                        message.cid = reader.readString();
                        break;
                    case 3:
                        message.signer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSetName {
            return MsgSetName.deserialize(bytes);
        }
    }
    export class MsgSetNameResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgSetNameResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSetNameResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSetNameResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSetNameResponse {
            return MsgSetNameResponse.deserialize(bytes);
        }
    }
    export class MsgReserveAuthority extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            signer?: string;
            owner?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get owner() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            signer?: string;
            owner?: string;
        }) {
            const message = new MsgReserveAuthority({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                signer?: string;
                owner?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(2, this.signer);
            if (typeof this.owner === "string" && this.owner.length)
                writer.writeString(3, this.owner);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgReserveAuthority {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgReserveAuthority();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.signer = reader.readString();
                        break;
                    case 3:
                        message.owner = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgReserveAuthority {
            return MsgReserveAuthority.deserialize(bytes);
        }
    }
    export class MsgReserveAuthorityResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgReserveAuthorityResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgReserveAuthorityResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgReserveAuthorityResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgReserveAuthorityResponse {
            return MsgReserveAuthorityResponse.deserialize(bytes);
        }
    }
    export class MsgSetAuthorityBond extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            bond_id?: string;
            signer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("bond_id" in data && data.bond_id != undefined) {
                    this.bond_id = data.bond_id;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get bond_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set bond_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            bond_id?: string;
            signer?: string;
        }) {
            const message = new MsgSetAuthorityBond({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.bond_id != null) {
                message.bond_id = data.bond_id;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                bond_id?: string;
                signer?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.bond_id != null) {
                data.bond_id = this.bond_id;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.bond_id === "string" && this.bond_id.length)
                writer.writeString(2, this.bond_id);
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(3, this.signer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSetAuthorityBond {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSetAuthorityBond();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.bond_id = reader.readString();
                        break;
                    case 3:
                        message.signer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSetAuthorityBond {
            return MsgSetAuthorityBond.deserialize(bytes);
        }
    }
    export class MsgSetAuthorityBondResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgSetAuthorityBondResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSetAuthorityBondResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSetAuthorityBondResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSetAuthorityBondResponse {
            return MsgSetAuthorityBondResponse.deserialize(bytes);
        }
    }
    export class MsgDeleteNameAuthority extends pb_1.Message {
        constructor(data?: any[] | {
            crn?: string;
            signer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("crn" in data && data.crn != undefined) {
                    this.crn = data.crn;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
            }
        }
        get crn() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set crn(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            crn?: string;
            signer?: string;
        }) {
            const message = new MsgDeleteNameAuthority({});
            if (data.crn != null) {
                message.crn = data.crn;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            return message;
        }
        toObject() {
            const data: {
                crn?: string;
                signer?: string;
            } = {};
            if (this.crn != null) {
                data.crn = this.crn;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.crn === "string" && this.crn.length)
                writer.writeString(1, this.crn);
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(2, this.signer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDeleteNameAuthority {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDeleteNameAuthority();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.crn = reader.readString();
                        break;
                    case 2:
                        message.signer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDeleteNameAuthority {
            return MsgDeleteNameAuthority.deserialize(bytes);
        }
    }
    export class MsgDeleteNameAuthorityResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgDeleteNameAuthorityResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDeleteNameAuthorityResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDeleteNameAuthorityResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDeleteNameAuthorityResponse {
            return MsgDeleteNameAuthorityResponse.deserialize(bytes);
        }
    }
    export class MsgRenewRecord extends pb_1.Message {
        constructor(data?: any[] | {
            record_id?: string;
            signer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("record_id" in data && data.record_id != undefined) {
                    this.record_id = data.record_id;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
            }
        }
        get record_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set record_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            record_id?: string;
            signer?: string;
        }) {
            const message = new MsgRenewRecord({});
            if (data.record_id != null) {
                message.record_id = data.record_id;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            return message;
        }
        toObject() {
            const data: {
                record_id?: string;
                signer?: string;
            } = {};
            if (this.record_id != null) {
                data.record_id = this.record_id;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.record_id === "string" && this.record_id.length)
                writer.writeString(1, this.record_id);
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(2, this.signer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRenewRecord {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRenewRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.record_id = reader.readString();
                        break;
                    case 2:
                        message.signer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRenewRecord {
            return MsgRenewRecord.deserialize(bytes);
        }
    }
    export class MsgRenewRecordResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgRenewRecordResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRenewRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRenewRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRenewRecordResponse {
            return MsgRenewRecordResponse.deserialize(bytes);
        }
    }
    export class MsgAssociateBond extends pb_1.Message {
        constructor(data?: any[] | {
            record_id?: string;
            bond_id?: string;
            signer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("record_id" in data && data.record_id != undefined) {
                    this.record_id = data.record_id;
                }
                if ("bond_id" in data && data.bond_id != undefined) {
                    this.bond_id = data.bond_id;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
            }
        }
        get record_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set record_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get bond_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set bond_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            record_id?: string;
            bond_id?: string;
            signer?: string;
        }) {
            const message = new MsgAssociateBond({});
            if (data.record_id != null) {
                message.record_id = data.record_id;
            }
            if (data.bond_id != null) {
                message.bond_id = data.bond_id;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            return message;
        }
        toObject() {
            const data: {
                record_id?: string;
                bond_id?: string;
                signer?: string;
            } = {};
            if (this.record_id != null) {
                data.record_id = this.record_id;
            }
            if (this.bond_id != null) {
                data.bond_id = this.bond_id;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.record_id === "string" && this.record_id.length)
                writer.writeString(1, this.record_id);
            if (typeof this.bond_id === "string" && this.bond_id.length)
                writer.writeString(2, this.bond_id);
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(3, this.signer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgAssociateBond {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgAssociateBond();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.record_id = reader.readString();
                        break;
                    case 2:
                        message.bond_id = reader.readString();
                        break;
                    case 3:
                        message.signer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgAssociateBond {
            return MsgAssociateBond.deserialize(bytes);
        }
    }
    export class MsgAssociateBondResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgAssociateBondResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgAssociateBondResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgAssociateBondResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgAssociateBondResponse {
            return MsgAssociateBondResponse.deserialize(bytes);
        }
    }
    export class MsgDissociateBond extends pb_1.Message {
        constructor(data?: any[] | {
            record_id?: string;
            signer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("record_id" in data && data.record_id != undefined) {
                    this.record_id = data.record_id;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
            }
        }
        get record_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set record_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            record_id?: string;
            signer?: string;
        }) {
            const message = new MsgDissociateBond({});
            if (data.record_id != null) {
                message.record_id = data.record_id;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            return message;
        }
        toObject() {
            const data: {
                record_id?: string;
                signer?: string;
            } = {};
            if (this.record_id != null) {
                data.record_id = this.record_id;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.record_id === "string" && this.record_id.length)
                writer.writeString(1, this.record_id);
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(2, this.signer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDissociateBond {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDissociateBond();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.record_id = reader.readString();
                        break;
                    case 2:
                        message.signer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDissociateBond {
            return MsgDissociateBond.deserialize(bytes);
        }
    }
    export class MsgDissociateBondResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgDissociateBondResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDissociateBondResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDissociateBondResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDissociateBondResponse {
            return MsgDissociateBondResponse.deserialize(bytes);
        }
    }
    export class MsgDissociateRecords extends pb_1.Message {
        constructor(data?: any[] | {
            bond_id?: string;
            signer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bond_id" in data && data.bond_id != undefined) {
                    this.bond_id = data.bond_id;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
            }
        }
        get bond_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set bond_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            bond_id?: string;
            signer?: string;
        }) {
            const message = new MsgDissociateRecords({});
            if (data.bond_id != null) {
                message.bond_id = data.bond_id;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            return message;
        }
        toObject() {
            const data: {
                bond_id?: string;
                signer?: string;
            } = {};
            if (this.bond_id != null) {
                data.bond_id = this.bond_id;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.bond_id === "string" && this.bond_id.length)
                writer.writeString(1, this.bond_id);
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(2, this.signer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDissociateRecords {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDissociateRecords();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bond_id = reader.readString();
                        break;
                    case 2:
                        message.signer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDissociateRecords {
            return MsgDissociateRecords.deserialize(bytes);
        }
    }
    export class MsgDissociateRecordsResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgDissociateRecordsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDissociateRecordsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDissociateRecordsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDissociateRecordsResponse {
            return MsgDissociateRecordsResponse.deserialize(bytes);
        }
    }
    export class MsgReAssociateRecords extends pb_1.Message {
        constructor(data?: any[] | {
            new_bond_id?: string;
            old_bond_id?: string;
            signer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_bond_id" in data && data.new_bond_id != undefined) {
                    this.new_bond_id = data.new_bond_id;
                }
                if ("old_bond_id" in data && data.old_bond_id != undefined) {
                    this.old_bond_id = data.old_bond_id;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
            }
        }
        get new_bond_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set new_bond_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get old_bond_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set old_bond_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            new_bond_id?: string;
            old_bond_id?: string;
            signer?: string;
        }) {
            const message = new MsgReAssociateRecords({});
            if (data.new_bond_id != null) {
                message.new_bond_id = data.new_bond_id;
            }
            if (data.old_bond_id != null) {
                message.old_bond_id = data.old_bond_id;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            return message;
        }
        toObject() {
            const data: {
                new_bond_id?: string;
                old_bond_id?: string;
                signer?: string;
            } = {};
            if (this.new_bond_id != null) {
                data.new_bond_id = this.new_bond_id;
            }
            if (this.old_bond_id != null) {
                data.old_bond_id = this.old_bond_id;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.new_bond_id === "string" && this.new_bond_id.length)
                writer.writeString(1, this.new_bond_id);
            if (typeof this.old_bond_id === "string" && this.old_bond_id.length)
                writer.writeString(2, this.old_bond_id);
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(3, this.signer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgReAssociateRecords {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgReAssociateRecords();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.new_bond_id = reader.readString();
                        break;
                    case 2:
                        message.old_bond_id = reader.readString();
                        break;
                    case 3:
                        message.signer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgReAssociateRecords {
            return MsgReAssociateRecords.deserialize(bytes);
        }
    }
    export class MsgReAssociateRecordsResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgReAssociateRecordsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgReAssociateRecordsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgReAssociateRecordsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgReAssociateRecordsResponse {
            return MsgReAssociateRecordsResponse.deserialize(bytes);
        }
    }
}
