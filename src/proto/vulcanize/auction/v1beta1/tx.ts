// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.14.0
 * source: vulcanize/auction/v1beta1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../google/protobuf/duration";
import * as dependency_3 from "./../../../cosmos/base/v1beta1/coin";
import * as dependency_4 from "./types";
import * as pb_1 from "google-protobuf";
export namespace vulcanize.auction.v1beta1 {
    export class MsgCreateAuction extends pb_1.Message {
        constructor(data?: any[] | {
            commits_duration?: dependency_2.google.protobuf.Duration;
            reveals_duration?: dependency_2.google.protobuf.Duration;
            commit_fee?: dependency_3.cosmos.base.v1beta1.Coin;
            reveal_fee?: dependency_3.cosmos.base.v1beta1.Coin;
            minimum_bid?: dependency_3.cosmos.base.v1beta1.Coin;
            signer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("commits_duration" in data && data.commits_duration != undefined) {
                    this.commits_duration = data.commits_duration;
                }
                if ("reveals_duration" in data && data.reveals_duration != undefined) {
                    this.reveals_duration = data.reveals_duration;
                }
                if ("commit_fee" in data && data.commit_fee != undefined) {
                    this.commit_fee = data.commit_fee;
                }
                if ("reveal_fee" in data && data.reveal_fee != undefined) {
                    this.reveal_fee = data.reveal_fee;
                }
                if ("minimum_bid" in data && data.minimum_bid != undefined) {
                    this.minimum_bid = data.minimum_bid;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
            }
        }
        get commits_duration() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Duration, 1) as dependency_2.google.protobuf.Duration;
        }
        set commits_duration(value: dependency_2.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get reveals_duration() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Duration, 2) as dependency_2.google.protobuf.Duration;
        }
        set reveals_duration(value: dependency_2.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get commit_fee() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 3) as dependency_3.cosmos.base.v1beta1.Coin;
        }
        set commit_fee(value: dependency_3.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get reveal_fee() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 4) as dependency_3.cosmos.base.v1beta1.Coin;
        }
        set reveal_fee(value: dependency_3.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get minimum_bid() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 5) as dependency_3.cosmos.base.v1beta1.Coin;
        }
        set minimum_bid(value: dependency_3.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            commits_duration?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
            reveals_duration?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
            commit_fee?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>;
            reveal_fee?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>;
            minimum_bid?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>;
            signer?: string;
        }) {
            const message = new MsgCreateAuction({});
            if (data.commits_duration != null) {
                message.commits_duration = dependency_2.google.protobuf.Duration.fromObject(data.commits_duration);
            }
            if (data.reveals_duration != null) {
                message.reveals_duration = dependency_2.google.protobuf.Duration.fromObject(data.reveals_duration);
            }
            if (data.commit_fee != null) {
                message.commit_fee = dependency_3.cosmos.base.v1beta1.Coin.fromObject(data.commit_fee);
            }
            if (data.reveal_fee != null) {
                message.reveal_fee = dependency_3.cosmos.base.v1beta1.Coin.fromObject(data.reveal_fee);
            }
            if (data.minimum_bid != null) {
                message.minimum_bid = dependency_3.cosmos.base.v1beta1.Coin.fromObject(data.minimum_bid);
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            return message;
        }
        toObject() {
            const data: {
                commits_duration?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
                reveals_duration?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
                commit_fee?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>;
                reveal_fee?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>;
                minimum_bid?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>;
                signer?: string;
            } = {};
            if (this.commits_duration != null) {
                data.commits_duration = this.commits_duration.toObject();
            }
            if (this.reveals_duration != null) {
                data.reveals_duration = this.reveals_duration.toObject();
            }
            if (this.commit_fee != null) {
                data.commit_fee = this.commit_fee.toObject();
            }
            if (this.reveal_fee != null) {
                data.reveal_fee = this.reveal_fee.toObject();
            }
            if (this.minimum_bid != null) {
                data.minimum_bid = this.minimum_bid.toObject();
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.commits_duration !== undefined)
                writer.writeMessage(1, this.commits_duration, () => this.commits_duration.serialize(writer));
            if (this.reveals_duration !== undefined)
                writer.writeMessage(2, this.reveals_duration, () => this.reveals_duration.serialize(writer));
            if (this.commit_fee !== undefined)
                writer.writeMessage(3, this.commit_fee, () => this.commit_fee.serialize(writer));
            if (this.reveal_fee !== undefined)
                writer.writeMessage(4, this.reveal_fee, () => this.reveal_fee.serialize(writer));
            if (this.minimum_bid !== undefined)
                writer.writeMessage(5, this.minimum_bid, () => this.minimum_bid.serialize(writer));
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(6, this.signer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateAuction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateAuction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.commits_duration, () => message.commits_duration = dependency_2.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.reveals_duration, () => message.reveals_duration = dependency_2.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.commit_fee, () => message.commit_fee = dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.reveal_fee, () => message.reveal_fee = dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.minimum_bid, () => message.minimum_bid = dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 6:
                        message.signer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateAuction {
            return MsgCreateAuction.deserialize(bytes);
        }
    }
    export class MsgCreateAuctionResponse extends pb_1.Message {
        constructor(data?: any[] | {
            auction?: dependency_4.vulcanize.auction.v1beta1.Auction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auction" in data && data.auction != undefined) {
                    this.auction = data.auction;
                }
            }
        }
        get auction() {
            return pb_1.Message.getWrapperField(this, dependency_4.vulcanize.auction.v1beta1.Auction, 1) as dependency_4.vulcanize.auction.v1beta1.Auction;
        }
        set auction(value: dependency_4.vulcanize.auction.v1beta1.Auction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            auction?: ReturnType<typeof dependency_4.vulcanize.auction.v1beta1.Auction.prototype.toObject>;
        }) {
            const message = new MsgCreateAuctionResponse({});
            if (data.auction != null) {
                message.auction = dependency_4.vulcanize.auction.v1beta1.Auction.fromObject(data.auction);
            }
            return message;
        }
        toObject() {
            const data: {
                auction?: ReturnType<typeof dependency_4.vulcanize.auction.v1beta1.Auction.prototype.toObject>;
            } = {};
            if (this.auction != null) {
                data.auction = this.auction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.auction !== undefined)
                writer.writeMessage(1, this.auction, () => this.auction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateAuctionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateAuctionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.auction, () => message.auction = dependency_4.vulcanize.auction.v1beta1.Auction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateAuctionResponse {
            return MsgCreateAuctionResponse.deserialize(bytes);
        }
    }
    export class MsgCommitBid extends pb_1.Message {
        constructor(data?: any[] | {
            auction_id?: string;
            commit_hash?: string;
            signer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auction_id" in data && data.auction_id != undefined) {
                    this.auction_id = data.auction_id;
                }
                if ("commit_hash" in data && data.commit_hash != undefined) {
                    this.commit_hash = data.commit_hash;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
            }
        }
        get auction_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set auction_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get commit_hash() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set commit_hash(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            auction_id?: string;
            commit_hash?: string;
            signer?: string;
        }) {
            const message = new MsgCommitBid({});
            if (data.auction_id != null) {
                message.auction_id = data.auction_id;
            }
            if (data.commit_hash != null) {
                message.commit_hash = data.commit_hash;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            return message;
        }
        toObject() {
            const data: {
                auction_id?: string;
                commit_hash?: string;
                signer?: string;
            } = {};
            if (this.auction_id != null) {
                data.auction_id = this.auction_id;
            }
            if (this.commit_hash != null) {
                data.commit_hash = this.commit_hash;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.auction_id === "string" && this.auction_id.length)
                writer.writeString(1, this.auction_id);
            if (typeof this.commit_hash === "string" && this.commit_hash.length)
                writer.writeString(2, this.commit_hash);
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(3, this.signer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCommitBid {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCommitBid();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.auction_id = reader.readString();
                        break;
                    case 2:
                        message.commit_hash = reader.readString();
                        break;
                    case 3:
                        message.signer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCommitBid {
            return MsgCommitBid.deserialize(bytes);
        }
    }
    export class MsgRevealBid extends pb_1.Message {
        constructor(data?: any[] | {
            auction_id?: string;
            reveal?: string;
            signer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auction_id" in data && data.auction_id != undefined) {
                    this.auction_id = data.auction_id;
                }
                if ("reveal" in data && data.reveal != undefined) {
                    this.reveal = data.reveal;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
            }
        }
        get auction_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set auction_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get reveal() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set reveal(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get signer() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            auction_id?: string;
            reveal?: string;
            signer?: string;
        }) {
            const message = new MsgRevealBid({});
            if (data.auction_id != null) {
                message.auction_id = data.auction_id;
            }
            if (data.reveal != null) {
                message.reveal = data.reveal;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            return message;
        }
        toObject() {
            const data: {
                auction_id?: string;
                reveal?: string;
                signer?: string;
            } = {};
            if (this.auction_id != null) {
                data.auction_id = this.auction_id;
            }
            if (this.reveal != null) {
                data.reveal = this.reveal;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.auction_id === "string" && this.auction_id.length)
                writer.writeString(1, this.auction_id);
            if (typeof this.reveal === "string" && this.reveal.length)
                writer.writeString(2, this.reveal);
            if (typeof this.signer === "string" && this.signer.length)
                writer.writeString(3, this.signer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRevealBid {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRevealBid();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.auction_id = reader.readString();
                        break;
                    case 2:
                        message.reveal = reader.readString();
                        break;
                    case 3:
                        message.signer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRevealBid {
            return MsgRevealBid.deserialize(bytes);
        }
    }
    export class MsgCommitBidResponse extends pb_1.Message {
        constructor(data?: any[] | {
            bid?: dependency_4.vulcanize.auction.v1beta1.Bid;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bid" in data && data.bid != undefined) {
                    this.bid = data.bid;
                }
            }
        }
        get bid() {
            return pb_1.Message.getWrapperField(this, dependency_4.vulcanize.auction.v1beta1.Bid, 1) as dependency_4.vulcanize.auction.v1beta1.Bid;
        }
        set bid(value: dependency_4.vulcanize.auction.v1beta1.Bid) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            bid?: ReturnType<typeof dependency_4.vulcanize.auction.v1beta1.Bid.prototype.toObject>;
        }) {
            const message = new MsgCommitBidResponse({});
            if (data.bid != null) {
                message.bid = dependency_4.vulcanize.auction.v1beta1.Bid.fromObject(data.bid);
            }
            return message;
        }
        toObject() {
            const data: {
                bid?: ReturnType<typeof dependency_4.vulcanize.auction.v1beta1.Bid.prototype.toObject>;
            } = {};
            if (this.bid != null) {
                data.bid = this.bid.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.bid !== undefined)
                writer.writeMessage(1, this.bid, () => this.bid.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCommitBidResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCommitBidResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.bid, () => message.bid = dependency_4.vulcanize.auction.v1beta1.Bid.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCommitBidResponse {
            return MsgCommitBidResponse.deserialize(bytes);
        }
    }
    export class MsgRevealBidResponse extends pb_1.Message {
        constructor(data?: any[] | {
            auction?: dependency_4.vulcanize.auction.v1beta1.Auction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auction" in data && data.auction != undefined) {
                    this.auction = data.auction;
                }
            }
        }
        get auction() {
            return pb_1.Message.getWrapperField(this, dependency_4.vulcanize.auction.v1beta1.Auction, 1) as dependency_4.vulcanize.auction.v1beta1.Auction;
        }
        set auction(value: dependency_4.vulcanize.auction.v1beta1.Auction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            auction?: ReturnType<typeof dependency_4.vulcanize.auction.v1beta1.Auction.prototype.toObject>;
        }) {
            const message = new MsgRevealBidResponse({});
            if (data.auction != null) {
                message.auction = dependency_4.vulcanize.auction.v1beta1.Auction.fromObject(data.auction);
            }
            return message;
        }
        toObject() {
            const data: {
                auction?: ReturnType<typeof dependency_4.vulcanize.auction.v1beta1.Auction.prototype.toObject>;
            } = {};
            if (this.auction != null) {
                data.auction = this.auction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.auction !== undefined)
                writer.writeMessage(1, this.auction, () => this.auction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRevealBidResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRevealBidResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.auction, () => message.auction = dependency_4.vulcanize.auction.v1beta1.Auction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRevealBidResponse {
            return MsgRevealBidResponse.deserialize(bytes);
        }
    }
}
